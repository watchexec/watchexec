---
source: crates/cli/tests/help.rs
assertion_line: 16
expression: "String::from_utf8(output.stdout).unwrap()"
---
⚠ DEBUG BUILD ⚠

watchexec 1.20.1
Execute commands when watched files change

USAGE:
    watchexec.exe [OPTIONS] <command>...

OPTIONS:
    -h, --help       Print help information
    -V, --version    Print version information

Command options:
    -E, --env <name=value>    Add an environment variable to the command
    -n, --no-shell            Do not wrap command in a shell. Deprecated: use --shell=none instead.
        --no-environment      Do not set WATCHEXEC_*_PATH environment variables for the command
        --no-process-group    Do not use a process group when running the command
        --shell <shell>       Use a different shell, or `none`. Try --shell=powershell, which will
                              become the default in 2.0.
        --workdir <path>      Change the working directory of the command
    <command>...          Command to execute

Filtering options:
    -e, --exts <extensions>        Comma-separated list of file extensions to watch (e.g.
                                   js,css,html)
    -f, --filter <pattern>         Ignore all modifications except those matching the pattern
    -i, --ignore <pattern>         Ignore modifications to paths matching the pattern
        --no-default-ignore        Skip auto-ignoring of commonly ignored globs
        --no-global-ignore         Skip auto-loading of global or environment-wide ignore files
        --no-meta                  Ignore metadata changes
        --no-project-ignore        Skip auto-loading of project ignore files (.gitignore, .ignore,
                                   etc)
        --no-vcs-ignore            Skip auto-loading of VCS (Git, etc) ignore files
        --project-origin <path>    Override the project origin: the directory from which ignore
                                   files are detected
    -w, --watch <path>             Watch a specific file or directory

Output options:
    -c, --clear     Clear screen before executing command
    -N, --notify    Send a desktop notification when the command ends

Behaviour options:
    -d, --debounce <milliseconds>
            Set the timeout between detected change and command execution, defaults to 50ms

        --delay-run <seconds>
            Whenever starting the command, sleep some seconds first

        --force-poll <interval>
            Force polling mode (interval in milliseconds)

        --on-busy-update <on-busy-update>
            Select the behaviour to use when receiving events while the command is running. Current
            default is queue, will change to do-nothing in 2.0. [possible values: do-nothing, queue,
            restart, signal]

    -p, --postpone
            Wait until first change to execute command

    -r, --restart
            Restart the process if it's still running. Shorthand for --on-busy-update=restart

    -s, --signal <signal>
            Specify the signal to send when using --on-busy-update=signal

Debugging options:
        --log-file <path>    Write debugging messages to file in JSON format (use for bug reports)
        --print-events       Print events that trigger actions
    -v, --verbose            Print debugging messages (-v, -vv, -vvv, -vvvv; use -vvv for bug
                             reports)

Use @argfile as first argument to load arguments from the file `argfile` (one argument per line)
which will be inserted in place of the @argfile (further arguments on the CLI will override or add
onto those in the file).

